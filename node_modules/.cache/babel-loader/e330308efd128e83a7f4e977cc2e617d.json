{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from './WorkboxError.js';\nimport { logger } from './logger.js';\nimport { assert } from './assert.js';\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport '../_version.js';\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Object} options\n * @param {Request|string} options.request\n * @param {Object} [options.fetchOptions]\n * @param {ExtendableEvent} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\n\nconst wrappedFetch = async _ref => {\n  let {\n    request,\n    fetchOptions,\n    event,\n    plugins = []\n  } = _ref;\n\n  if (typeof request === 'string') {\n    request = new Request(request);\n  } // We *should* be able to call `await event.preloadResponse` even if it's\n  // undefined, but for some reason, doing so leads to errors in our Node unit\n  // tests. To work around that, explicitly check preloadResponse's value first.\n\n\n  if (event instanceof FetchEvent && event.preloadResponse) {\n    const possiblePreloadResponse = await event.preloadResponse;\n\n    if (possiblePreloadResponse) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log(`Using a preloaded navigation response for ` + `'${getFriendlyURL(request.url)}'`);\n      }\n\n      return possiblePreloadResponse;\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isInstance(request, Request, {\n      paramName: 'request',\n      expectedClass: Request,\n      moduleName: 'workbox-core',\n      className: 'fetchWrapper',\n      funcName: 'wrappedFetch'\n    });\n  }\n\n  const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\"\n  /* FETCH_DID_FAIL */\n  ); // If there is a fetchDidFail plugin, we need to save a clone of the\n  // original request before it's either modified by a requestWillFetch\n  // plugin or before the original request's body is consumed via fetch().\n\n  const originalRequest = failedFetchPlugins.length > 0 ? request.clone() : null;\n\n  try {\n    for (const plugin of plugins) {\n      if (\"requestWillFetch\"\n      /* REQUEST_WILL_FETCH */\n      in plugin) {\n        const pluginMethod = plugin[\"requestWillFetch\"\n        /* REQUEST_WILL_FETCH */\n        ];\n        const requestClone = request.clone();\n        request = await pluginMethod.call(plugin, {\n          request: requestClone,\n          event\n        });\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (request) {\n            assert.isInstance(request, Request, {\n              moduleName: 'Plugin',\n              funcName: \"cachedResponseWillBeUsed\"\n              /* CACHED_RESPONSE_WILL_BE_USED */\n              ,\n              isReturnValueProblem: true\n            });\n          }\n        }\n      }\n    }\n  } catch (err) {\n    throw new WorkboxError('plugin-error-request-will-fetch', {\n      thrownError: err\n    });\n  } // The request can be altered by plugins with `requestWillFetch` making\n  // the original request (Most likely from a `fetch` event) to be different\n  // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n\n\n  const pluginFilteredRequest = request.clone();\n\n  try {\n    let fetchResponse; // See https://github.com/GoogleChrome/workbox/issues/1796\n\n    if (request.mode === 'navigate') {\n      fetchResponse = await fetch(request);\n    } else {\n      fetchResponse = await fetch(request, fetchOptions);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.debug(`Network request for ` + `'${getFriendlyURL(request.url)}' returned a response with ` + `status '${fetchResponse.status}'.`);\n    }\n\n    for (const plugin of plugins) {\n      if (\"fetchDidSucceed\"\n      /* FETCH_DID_SUCCEED */\n      in plugin) {\n        fetchResponse = await plugin[\"fetchDidSucceed\"\n        /* FETCH_DID_SUCCEED */\n        ].call(plugin, {\n          event,\n          request: pluginFilteredRequest,\n          response: fetchResponse\n        });\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (fetchResponse) {\n            assert.isInstance(fetchResponse, Response, {\n              moduleName: 'Plugin',\n              funcName: \"fetchDidSucceed\"\n              /* FETCH_DID_SUCCEED */\n              ,\n              isReturnValueProblem: true\n            });\n          }\n        }\n      }\n    }\n\n    return fetchResponse;\n  } catch (error) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.error(`Network request for ` + `'${getFriendlyURL(request.url)}' threw an error.`, error);\n    }\n\n    for (const plugin of failedFetchPlugins) {\n      await plugin[\"fetchDidFail\"\n      /* FETCH_DID_FAIL */\n      ].call(plugin, {\n        error,\n        event,\n        originalRequest: originalRequest.clone(),\n        request: pluginFilteredRequest.clone()\n      });\n    }\n\n    throw error;\n  }\n};\n\nconst fetchWrapper = {\n  fetch: wrappedFetch\n};\nexport { fetchWrapper };","map":{"version":3,"names":["WorkboxError","logger","assert","getFriendlyURL","pluginUtils","wrappedFetch","request","fetchOptions","event","plugins","Request","FetchEvent","preloadResponse","possiblePreloadResponse","process","env","NODE_ENV","log","url","isInstance","paramName","expectedClass","moduleName","className","funcName","failedFetchPlugins","filter","originalRequest","length","clone","plugin","pluginMethod","requestClone","call","isReturnValueProblem","err","thrownError","pluginFilteredRequest","fetchResponse","mode","fetch","debug","status","response","Response","error","fetchWrapper"],"sources":["C:/Users/matth/Documents/careerfoundry/meet_app/meet/node_modules/workbox-core/_private/fetchWrapper.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from './WorkboxError.js';\nimport { logger } from './logger.js';\nimport { assert } from './assert.js';\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport '../_version.js';\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Object} options\n * @param {Request|string} options.request\n * @param {Object} [options.fetchOptions]\n * @param {ExtendableEvent} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst wrappedFetch = async ({ request, fetchOptions, event, plugins = [], }) => {\n    if (typeof request === 'string') {\n        request = new Request(request);\n    }\n    // We *should* be able to call `await event.preloadResponse` even if it's\n    // undefined, but for some reason, doing so leads to errors in our Node unit\n    // tests. To work around that, explicitly check preloadResponse's value first.\n    if (event instanceof FetchEvent && event.preloadResponse) {\n        const possiblePreloadResponse = await event.preloadResponse;\n        if (possiblePreloadResponse) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Using a preloaded navigation response for ` +\n                    `'${getFriendlyURL(request.url)}'`);\n            }\n            return possiblePreloadResponse;\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(request, Request, {\n            paramName: 'request',\n            expectedClass: Request,\n            moduleName: 'workbox-core',\n            className: 'fetchWrapper',\n            funcName: 'wrappedFetch',\n        });\n    }\n    const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */);\n    // If there is a fetchDidFail plugin, we need to save a clone of the\n    // original request before it's either modified by a requestWillFetch\n    // plugin or before the original request's body is consumed via fetch().\n    const originalRequest = failedFetchPlugins.length > 0 ?\n        request.clone() : null;\n    try {\n        for (const plugin of plugins) {\n            if (\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin) {\n                const pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\n                const requestClone = request.clone();\n                request = await pluginMethod.call(plugin, {\n                    request: requestClone,\n                    event,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (request) {\n                        assert.isInstance(request, Request, {\n                            moduleName: 'Plugin',\n                            funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    catch (err) {\n        throw new WorkboxError('plugin-error-request-will-fetch', {\n            thrownError: err,\n        });\n    }\n    // The request can be altered by plugins with `requestWillFetch` making\n    // the original request (Most likely from a `fetch` event) to be different\n    // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n    const pluginFilteredRequest = request.clone();\n    try {\n        let fetchResponse;\n        // See https://github.com/GoogleChrome/workbox/issues/1796\n        if (request.mode === 'navigate') {\n            fetchResponse = await fetch(request);\n        }\n        else {\n            fetchResponse = await fetch(request, fetchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' returned a response with ` +\n                `status '${fetchResponse.status}'.`);\n        }\n        for (const plugin of plugins) {\n            if (\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in plugin) {\n                fetchResponse = await plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */]\n                    .call(plugin, {\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (fetchResponse) {\n                        assert.isInstance(fetchResponse, Response, {\n                            moduleName: 'Plugin',\n                            funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n        return fetchResponse;\n    }\n    catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' threw an error.`, error);\n        }\n        for (const plugin of failedFetchPlugins) {\n            await plugin[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(plugin, {\n                error,\n                event,\n                originalRequest: originalRequest.clone(),\n                request: pluginFilteredRequest.clone(),\n            });\n        }\n        throw error;\n    }\n};\nconst fetchWrapper = {\n    fetch: wrappedFetch,\n};\nexport { fetchWrapper };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}