{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\n\nclass NetworkFirst {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   * @param {number} options.networkTimeoutSeconds If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n\n    if (options.plugins) {\n      const isUsingCacheWillUpdate = options.plugins.some(plugin => !!plugin.cacheWillUpdate);\n      this._plugins = isUsingCacheWillUpdate ? options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._networkTimeoutSeconds) {\n        assert.isType(this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: 'NetworkFirst',\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds'\n        });\n      }\n    }\n\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  async handle(_ref) {\n    let {\n      event,\n      request\n    } = _ref;\n    const logs = [];\n\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'NetworkFirst',\n        funcName: 'handle',\n        paramName: 'makeRequest'\n      });\n    }\n\n    const promises = [];\n    let timeoutId;\n\n    if (this._networkTimeoutSeconds) {\n      const {\n        id,\n        promise\n      } = this._getTimeoutPromise({\n        request,\n        event,\n        logs\n      });\n\n      timeoutId = id;\n      promises.push(promise);\n    }\n\n    const networkPromise = this._getNetworkPromise({\n      timeoutId,\n      request,\n      event,\n      logs\n    });\n\n    promises.push(networkPromise); // Promise.race() will resolve as soon as the first promise resolves.\n\n    let response = await Promise.race(promises); // If Promise.race() resolved with null, it might be due to a network\n    // timeout + a cache miss. If that were to happen, we'd rather wait until\n    // the networkPromise resolves instead of returning null.\n    // Note that it's fine to await an already-resolved promise, so we don't\n    // have to check to see if it's still \"in flight\".\n\n    if (!response) {\n      response = await networkPromise;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n\n      for (const log of logs) {\n        logger.log(log);\n      }\n\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url\n      });\n    }\n\n    return response;\n  }\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs array\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n\n\n  _getTimeoutPromise(_ref2) {\n    let {\n      request,\n      logs,\n      event\n    } = _ref2;\n    let timeoutId;\n    const timeoutPromise = new Promise(resolve => {\n      const onNetworkTimeout = async () => {\n        if (process.env.NODE_ENV !== 'production') {\n          logs.push(`Timing out the network response at ` + `${this._networkTimeoutSeconds} seconds.`);\n        }\n\n        resolve(await this._respondFromCache({\n          request,\n          event\n        }));\n      };\n\n      timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n    });\n    return {\n      promise: timeoutPromise,\n      id: timeoutId\n    };\n  }\n  /**\n   * @param {Object} options\n   * @param {number|undefined} options.timeoutId\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs Array.\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n\n\n  async _getNetworkPromise(_ref3) {\n    let {\n      timeoutId,\n      request,\n      logs,\n      event\n    } = _ref3;\n    let error;\n    let response;\n\n    try {\n      response = await fetchWrapper.fetch({\n        request,\n        event,\n        fetchOptions: this._fetchOptions,\n        plugins: this._plugins\n      });\n    } catch (err) {\n      error = err;\n    }\n\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (response) {\n        logs.push(`Got response from network.`);\n      } else {\n        logs.push(`Unable to get a response from the network. Will respond ` + `with a cached response.`);\n      }\n    }\n\n    if (error || !response) {\n      response = await this._respondFromCache({\n        request,\n        event\n      });\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (response) {\n          logs.push(`Found a cached response in the '${this._cacheName}'` + ` cache.`);\n        } else {\n          logs.push(`No response found in the '${this._cacheName}' cache.`);\n        }\n      }\n    } else {\n      // Keep the service worker alive while we put the request in the cache\n      const responseClone = response.clone();\n      const cachePut = cacheWrapper.put({\n        cacheName: this._cacheName,\n        request,\n        response: responseClone,\n        event,\n        plugins: this._plugins\n      });\n\n      if (event) {\n        try {\n          // The event has been responded to so we can keep the SW alive to\n          // respond to the request\n          event.waitUntil(cachePut);\n        } catch (err) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n          }\n        }\n      }\n    }\n\n    return response;\n  }\n  /**\n   * Used if the network timeouts or fails to make the request.\n   *\n   * @param {Object} options\n   * @param {Request} request The request to match in the cache\n   * @param {Event} [options.event]\n   * @return {Promise<Object>}\n   *\n   * @private\n   */\n\n\n  _respondFromCache(_ref4) {\n    let {\n      event,\n      request\n    } = _ref4;\n    return cacheWrapper.match({\n      cacheName: this._cacheName,\n      request,\n      event,\n      matchOptions: this._matchOptions,\n      plugins: this._plugins\n    });\n  }\n\n}\n\nexport { NetworkFirst };","map":{"version":3,"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","cacheOkAndOpaquePlugin","NetworkFirst","constructor","options","_cacheName","getRuntimeName","cacheName","plugins","isUsingCacheWillUpdate","some","plugin","cacheWillUpdate","_plugins","_networkTimeoutSeconds","networkTimeoutSeconds","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","_fetchOptions","fetchOptions","_matchOptions","matchOptions","handle","event","request","logs","Request","isInstance","promises","timeoutId","id","promise","_getTimeoutPromise","push","networkPromise","_getNetworkPromise","response","Promise","race","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","timeoutPromise","resolve","onNetworkTimeout","_respondFromCache","setTimeout","error","fetch","err","clearTimeout","responseClone","clone","cachePut","put","waitUntil","warn","match"],"sources":["C:/Users/matth/Documents/careerfoundry/meet_app/meet/node_modules/workbox-strategies/NetworkFirst.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} options.networkTimeoutSeconds If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: 'NetworkFirst',\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'NetworkFirst',\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, event, logs });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({ timeoutId, request, event, logs });\n        promises.push(networkPromise);\n        // Promise.race() will resolve as soon as the first promise resolves.\n        let response = await Promise.race(promises);\n        // If Promise.race() resolved with null, it might be due to a network\n        // timeout + a cache miss. If that were to happen, we'd rather wait until\n        // the networkPromise resolves instead of returning null.\n        // Note that it's fine to await an already-resolved promise, so we don't\n        // have to check to see if it's still \"in flight\".\n        if (!response) {\n            response = await networkPromise;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, event }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await this._respondFromCache({ request, event }));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, event }) {\n        let error;\n        let response;\n        try {\n            response = await fetchWrapper.fetch({\n                request,\n                event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins,\n            });\n        }\n        catch (err) {\n            error = err;\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await this._respondFromCache({ request, event });\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this._cacheName}'` +\n                        ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this._cacheName}' cache.`);\n                }\n            }\n        }\n        else {\n            // Keep the service worker alive while we put the request in the cache\n            const responseClone = response.clone();\n            const cachePut = cacheWrapper.put({\n                cacheName: this._cacheName,\n                request,\n                response: responseClone,\n                event,\n                plugins: this._plugins,\n            });\n            if (event) {\n                try {\n                    // The event has been responded to so we can keep the SW alive to\n                    // respond to the request\n                    event.waitUntil(cachePut);\n                }\n                catch (err) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        return response;\n    }\n    /**\n     * Used if the network timeouts or fails to make the request.\n     *\n     * @param {Object} options\n     * @param {Request} request The request to match in the cache\n     * @param {Event} [options.event]\n     * @return {Promise<Object>}\n     *\n     * @private\n     */\n    _respondFromCache({ event, request }) {\n        return cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n    }\n}\nexport { NetworkFirst };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}